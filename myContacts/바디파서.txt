미들웨어: 요청과 응답 중간에 실행되는 함수
클라이언트 요청이 들어와 응답이 반환되기 전에 요청/응답 객체를 변경하거나 특정 작업을 수행할 수 있는 기능을 제공합니다.

미들웨어 함수는 세 가지 매개변수를 받음
req: 클라이언트의 요청 데이터를 담고 있음
res: 서버가 클라이언트로 응답을 보낼 때 사용
next: 다음 미들웨어 또는 라우터로 요청을 전달

라우터 미들웨어: 라우팅을 쉽게 해주는 함수들이 포함되어 있음

미들웨어의 종류
1. 애플리케이션 수준 미들웨어: 애플리케이션 전체에서 동작하는 미들웨어
2. 라우터 수준 미들웨어: 특정 라우터에만 적용되는 미들웨어
express.Router();
3. 내장 미들웨어: Express.js에서 기본 제공하는 미들웨어
주요 내장 미들웨어: 
express.json(): json데이터 파싱
express.urlencoded(): url encoded 데이터 파싱

4. 서드파티 미들웨어: 외부 라이브러리를 통해 제공되는 미들웨어
주요 서드파티 미들웨어
body-parser: 요청 본문 파싱(Express 4.16.0 이후로 내장)
morgan: http요청 로깅
cookie-parser:  쿠키 처리
cors: cross-origin resource sharing 처리리

5. 에러 처리 미들웨어: 오류를 처리하기 위한 특수한 미들웨어


미들웨어의 주요 역할
1. 요청 처리 전 데이터 변환: 요청 데이터를 가공하거나 검증
2. 응답 전에 추가 작업 수행: 로그 작성, 응답 헤더 설정, 오류처리
3. 다음 미들웨어로 전달: next()호출을 통해 요청이 다른 미들웨어 또는 라우터로 전달됨


바디파서
바디: 요청 본문
파서: 파싱을 처리한다.
파싱: 입력된 데이터를 분석하고 이해 가능한 구조로 변환하는 과정
텍스트, 숫자. JSON 등의 데이터를 원하는 형식(객체, 배열) 으로 변환하여 프로그램이 처리할 수 있도록 만드는 작업

ex
{
  "name": "Alice",
  "age": 25
}
파싱전
const data = '{"name": "Alice", "age": 25}'; // 문자열

파싱후
const parsedData = JSON.parse(data); // 객체로 변환
console.log(parsedData.name); // 'Alice'

app.use(express.json()): 클라이언트가 보낸 json 형식의 요청 본문을 파싱하여 req.body 객체에 데이터를 추가하는 미들웨어