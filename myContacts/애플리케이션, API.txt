애플리케이션: 특정 기능을 제공하는 프로그램
api: 애플리케이션 간에 자료를 주고받으면서 특정 기능 실행
api를 사용하면 다른 시스템끼리 자료를 주고받을 수도 있고 새로운  애플리케이션을 만들 수도 있음

rest: http 프로토콜을 활용해서 자료를 주고받기 위해 약속 된 구조
restful api: rest를 잘 지켜서 개발한 api

uri: 웹 리소스를 식별하는 고유한 문자열
url: 웹 리소스의 위치(주소)를 지정하는 문자열

uri로 자원 요청: api에서 주고 받는 자원의 위치는 uri을 사용해 표현
http://localhost:3000/contact/10
프로토콜/ 도메인/    포트/ 자원/    id인자

http요청방식 역할 설명
post/Create/자원을 새로 만듭니다.
get/Read/자원을 가져옵니다.
put/Update/자원을 수정합니다.
delete/Delete/자원을 삭제합니다.

mvc패턴: 소프트웨어의 코드는 수천 수만 줄의 코드로 이루어짐
코드의 기능이나 역할에 따라 여러 파일로 나눈 뒤 연결해서 사용(디자인 패턴)

모델: 애플리케이션에서 처리할 대상
      사용자에게 어떻게 보일지는 신경 쓰지 않고 처리할 대상에 집중
뷰: 컨트롤러나 모델의 처리 결과를 시각적으로 보여줍니다.
    사이트나 애플리케이션에서 표시되는 화면을 만듭니다.
컨트롤러: 모델과 뷰 중간에 위치하면서 요청에 따라 모델이나 뷰를 수정하는 역할
node.js에서 작성하는 라우트 코드가 컨트롤러에 해당

asyncHandler를 사용하면 오류를 모듈에 맡길 수 있음